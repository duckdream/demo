---
description: 
globs: 
alwaysApply: true
---
# YAML工程师规范 v2.1

**目标**：成为可靠的YAML和Ansible专家，高效、规范地完成自动化部署任务。核心任务是协助处理所有与YAML相关的配置，特别是利用Ansible进行自动化部署。为了确保高质量的交付，请遵循以下规范：

## 1. YAML文件规范
- **语法与格式**: 保证所有YAML文件的语法正确、格式规范。
- **逻辑处理**: 妥善处理变量引用、条件语句、循环等复杂逻辑。
- **简洁性**: 保持文件和模板的简洁，避免不必要的复杂嵌套。
- **代码复用**: 合理使用变量、字典和列表，减少重复代码。

## 2. Ansible规范
- **版本兼容**: 使用 ansible 2.18.6 版本，并利用 `docker_compose_v2` 模块来处理 Docker Compose 文件。
- **模块化设计**: 每个任务对应一个独立的YAML文件，并精心规划目录结构。
- **任务划分**: 按逻辑组件组织任务，确保每个任务都能独立执行。
- **代码质量**: 添加必要的注释，仔细检查语法和变量引用。在修改时，全面评估其对全局的影响，并遵循循环、模板和错误处理的最佳实践，以保证playbook的健壮性。
- **循环最佳实践**: **禁止对 `block` 直接使用 `loop`**。应将需要循环的任务集提取到独立的任务文件中，再通过 `include_tasks` 对该文件进行循环调用，以保证模块化和语法正确性。
- **任务执行位置**: 精确规划任务的执行节点。需要从 Ansible 控制端访问远程服务的任务（如 `wait_for` 远程端口），不应使用 `delegate_to: localhost`，而应直接连接远程主机的 `ansible_host`。

## 3. Docker Compose 规范
- **遵循最佳实践**: 采用官方推荐的最佳实践，并结合项目实际情况进行调整。
- **V2格式**: 使用不包含 `version` 字段的V2格式。
- **command指令**: 谨慎使用 `command` 指令，以避免覆盖容器的默认入口点。
- **容器命名**: **必须为每一个服务明确添加 `container_name` 指令**，以保证容器名称的简洁、规范和可预测性。

## 4. 部署与健壮性规范 (核心经验)
- **配置优先级原则**: **必须意识到容器启动脚本可能优先读取环境变量，从而覆盖配置文件**。当日志显示配置未生效时（如数据库连接错误），应在 `docker-compose.yml` 中为服务**明确设置对应的环境变量**，以确保最高优先级。
- **权限匹配原则**: 当容器需要写入由 `root` 用户创建的宿主机挂载卷时，应在 `docker-compose.yml` 中为该服务**明确指定 `user: "root"`**，以避免权限被拒绝。
- **Jinja2模板健robustness**: 在使用 Jinja2 模板生成 YAML 文件时，**必须使用空白控制符 (`{%- ... -%}`)** 来精确控制 `if/else` 等逻辑块的输出，防止破坏 YAML 的缩进和语法结构。
- **依赖条件完整性**: 在 `docker-compose.yml` 中定义 `depends_on` 时，**必须包含明确的 `condition`**（如 `service_healthy` 或 `service_completed_successfully`），仅有服务名是不够的。
- **任务串行化**: 对于可能产生竞态条件的一次性任务（如多个数据库导入服务），**必须在 `docker-compose.yml` 中建立明确的串行依赖链**（`B` 依赖 `A`, `C` 依赖 `B`），确保其顺序执行。

## 5. README规范
- **严格遵循**: 严格遵循项目 `README.md` 文档中的要求，特别是被'!!!!'符号包裹的重要事项，确保项目的可理解性和可操作性。

## 6. 实践修正与核心原则提炼 (v2.1 新增)
在实际部署过程中，我们总结并提炼了以下核心原则，作为对现有规范的补充和强化。这些原则来自于对部署失败案例的分析，旨在让自动化脚本更加健壮、可靠和自洽。

-   **前置条件自检原则 (Prerequisite Self-Verification)**:
    自动化脚本必须是自包含的，不应假设外部环境已满足所有前提。**必须**在执行核心逻辑前，通过任务检查并创建所需的前置条件，例如使用 `ansible.builtin.file` 确保目标目录结构存在。禁止依赖手动操作（如 `mkdir`）来满足脚本的运行环境。

-   **模板继承原则 (Template Inheritance)**:
    当项目提供官方配置文件模板时（如 `*.conf` 或 `*.conf.dist`），**必须**以此文件为基础进行参数化，而不是从零创建自己的模板。应将原始模板复制到 `templates` 目录，再使用Jinja2变量替换需要动态修改的少量值。这能确保所有未指定的默认参数、注释和文件结构都得到完整保留，避免因遗漏关键配置而导致服务异常。

-   **权限需求透明原则 (Privilege Transparency)**:
    对于需要提升权限的任务（如安装软件包、修改系统文件），**必须**在任务上明确使用 `become: yes` 指令。同时，必须意识到这给执行环境带来了要求。虽然Playbook无法为用户配置`sudo`，但在文档或执行前的检查中，应能清晰地提示用户"本剧本需要执行用户拥有无密码的`sudo`权限"。

-   **手动操作自动化原则 (Manual Step Automation)**:
    对于文档中描述的、部署后需要手动执行的常规操作（如创建默认用户、初始化数据等），应尽可能地将其实现为**可选的自动化任务**。**必须**通过在变量文件中设置一个清晰的布尔开关（如 `create_default_user: false`）来控制这些可选任务的执行，从而提升部署的自动化覆盖率和一致性。

-   **任务执行位置精确化 (Refined Task Delegation)**:
    重申并强调：在判断任务执行位置时必须格外精确。一个典型的例子是使用 `wait_for` 检查远程服务端口。该任务的目的是**从Ansible控制端**验证到**远程主机`ansible_host`**的网络连通性。因此，它**不应**使用 `delegate_to` 指令，而是应在控制节点上默认执行，使其自然地连接到目标主机。 