---
# ansible/roles/config/tasks/main.yml

- name: "CONFIG | Template .env file using inline content"
  ansible.builtin.copy:
    dest: "{{ project_root }}/.env"
    mode: '0644'
    content: |
      # Database Root Password
      DOCKER_DB_ROOT_PASSWORD={{ db_root_password }}
      # Database external port
      DOCKER_DB_EXTERNAL_PORT={{ db_external_port }}
      # Auth server external port
      DOCKER_AUTH_EXTERNAL_PORT={{ auth_external_port }}
      # AzerothCore environment file path (DO NOT CHANGE)
      DOCKER_AC_ENV_FILE=./conf/dist/env.ac
      # Volume paths (DO NOT CHANGE)
      DOCKER_VOL_ETC=./env/dist/etc
      DOCKER_VOL_LOGS=./env/dist/logs
      DOCKER_VOL_DATA=./ac-client-data

- name: "CONFIG | Ensure destination directory for realm configs exists"
  ansible.builtin.file:
    path: "{{ project_root }}/env/dist/etc"
    state: directory
    mode: '0755'

- name: "CONFIG | Copy worldserver.conf template for each realm"
  ansible.builtin.copy:
    src: "{{ project_root }}/conf/dist/worldserver.conf"
    dest: "{{ project_root }}/env/dist/etc/s{{ item.id }}_worldserver.conf"
    remote_src: yes
    mode: '0644'
  loop: "{{ realms }}"
  loop_control:
    label: "{{ item.name }}"

- name: "CONFIG | Update RealmID in sX_worldserver.conf for each realm"
  ansible.builtin.lineinfile:
    path: "{{ project_root }}/env/dist/etc/s{{ item.id }}_worldserver.conf"
    regexp: '^RealmID ='
    line: 'RealmID = {{ item.id }}'
  loop: "{{ realms }}"
  loop_control:
    label: "{{ item.name }}"

- name: "CONFIG | Update WorldDatabaseInfo in sX_worldserver.conf for each realm"
  ansible.builtin.lineinfile:
    path: "{{ project_root }}/env/dist/etc/s{{ item.id }}_worldserver.conf"
    regexp: '^WorldDatabaseInfo ='
    line: 'WorldDatabaseInfo     = "ac-database;3306;root;{{ db_root_password }};s{{ item.id }}_world"'
  loop: "{{ realms }}"
  loop_control:
    label: "{{ item.name }}"

- name: "CONFIG | Update CharacterDatabaseInfo in sX_worldserver.conf for each realm"
  ansible.builtin.lineinfile:
    path: "{{ project_root }}/env/dist/etc/s{{ item.id }}_worldserver.conf"
    regexp: '^CharacterDatabaseInfo ='
    line: 'CharacterDatabaseInfo = "ac-database;3306;root;{{ db_root_password }};s{{ item.id }}_characters"'
  loop: "{{ realms }}"
  loop_control:
    label: "{{ item.name }}"

# --- Cleanup orphaned realm configs and databases ---

- name: CONFIG | Find existing realm config files
  ansible.builtin.find:
    paths: "{{ project_root }}/env/dist/etc"
    patterns: "s*_worldserver.conf"
  register: existing_configs

- name: CONFIG | Define expected realm config filenames
  ansible.builtin.set_fact:
    expected_configs: "{{ realms | map(attribute='id') | map('regex_replace', '^(.*)$', project_root ~ '/env/dist/etc/s\\1_worldserver.conf') | list }}"

- name: CONFIG | Cleanup orphaned realm config files
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ existing_configs.files }}"
  when: item.path not in expected_configs
  loop_control:
    label: "{{ item.path | basename }}"

- name: CONFIG | Get list of existing world/characters databases
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ db_root_password }}"
    login_host: "127.0.0.1"
    login_port: "{{ db_external_port }}"
    query: "SHOW DATABASES LIKE 's%\\_world';"
  register: world_dbs
  changed_when: false
  check_mode: no

- name: CONFIG | Get list of existing characters databases
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ db_root_password }}"
    login_host: "127.0.0.1"
    login_port: "{{ db_external_port }}"
    query: "SHOW DATABASES LIKE 's%\\_characters';"
  register: char_dbs
  changed_when: false
  check_mode: no

- name: CONFIG | Combine all existing realm database names
  ansible.builtin.set_fact:
    existing_db_names: "{{ (world_dbs.query_result | community.general.json_query('[].*') | flatten | list) + (char_dbs.query_result | community.general.json_query('[].*') | flatten | list) }}"

- name: CONFIG | Define expected realm database names
  ansible.builtin.set_fact:
    expected_db_names: "{{ realms | map(attribute='id') | map('regex_replace', '^(.*)$', 's\\1_world') | list + realms | map(attribute='id') | map('regex_replace', '^(.*)$', 's\\1_characters') | list }}"

- name: CONFIG | Cleanup orphaned realm databases
  community.mysql.mysql_db:
    name: "{{ item }}"
    state: absent
    login_user: root
    login_password: "{{ db_root_password }}"
    login_host: "127.0.0.1"
    login_port: "{{ db_external_port }}"
  loop: "{{ existing_db_names }}"
  when: item not in expected_db_names
  loop_control:
    label: "{{ item }}" 