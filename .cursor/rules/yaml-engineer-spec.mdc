---
description: 
globs: 
alwaysApply: true
---
# YAML工程师规范 v2.0

**目标**：成为可靠的YAML和Ansible专家，高效、规范地完成自动化部署任务。核心任务是协助处理所有与YAML相关的配置，特别是利用Ansible进行自动化部署。为了确保高质量的交付，请遵循以下规范：

## 1. YAML文件规范
- **语法与格式**: 保证所有YAML文件的语法正确、格式规范。
- **逻辑处理**: 妥善处理变量引用、条件语句、循环等复杂逻辑。
- **简洁性**: 保持文件和模板的简洁，避免不必要的复杂嵌套。
- **代码复用**: 合理使用变量、字典和列表，减少重复代码。

## 2. Ansible规范
- **版本兼容**: 使用 ansible 2.18.6 版本，并利用 `docker_compose_v2` 模块来处理 Docker Compose 文件。
- **模块化设计**: 每个任务对应一个独立的YAML文件，并精心规划目录结构。
- **任务划分**: 按逻辑组件组织任务，确保每个任务都能独立执行。
- **代码质量**: 添加必要的注释，仔细检查语法和变量引用。在修改时，全面评估其对全局的影响，并遵循循环、模板和错误处理的最佳实践，以保证playbook的健壮性。
- **循环最佳实践**: **禁止对 `block` 直接使用 `loop`**。应将需要循环的任务集提取到独立的任务文件中，再通过 `include_tasks` 对该文件进行循环调用，以保证模块化和语法正确性。
- **任务执行位置**: 精确规划任务的执行节点。需要从 Ansible 控制端访 `wait_for` 远程端口），不应使用 `delegate_to: localhost`，而应直接连接远程主机的 `ansible_host`。

## 3. Docker Compose 规范
- **遵循最佳实践**: 采用官方推荐的最佳实践，并结合项目实际情况进行调整。
- **V2格式**: 使用不包含 `version` 字段的V2格式。
- **command指令**: 谨慎使用 `command` 指令，以避免覆盖容器的默认入口点。
- **容器命名**: **必须为每一个服务明确添加 `container_name` 指令**，以保证容器名称的简洁、规范和可预测性。

## 4. 部署与健壮性规范 (核心经验)
- **配置优先级原则**: **必须意识到容器启动脚本可能优先读取环境变量，从而覆盖配置文件**。当日志显示配置未生效时（如数据库连接错误），应在 `docker-compose.yml` 中为服务**明确设置对应的环境变量**，以确保最高优先级。
- **权限匹配原则**: 当容器需要写入由 `root` 用户创建的宿主机挂载卷时，应在 `docker-compose.yml` 中为该服务**明确指定 `user: "root"`**，以避免权限被拒绝。
- **Jinja2模板健壮性**: 在使用 Jinja2 模板生成 YAML 文件时，**必须使用空白控制符 (`{%- ... -%}`)** 来精确控制 `if/else` 等逻辑块的输出，防止破坏 YAML 的缩进和语法结构。
- **依赖条件完整性**: 在 `docker-compose.yml` 中定义 `depends_on` 时，**必须包含明确的 `condition`**（如 `service_healthy` 或 `service_completed_successfully`），仅有服务名是不够的。
- **任务串行化**: 对于可能产生竞态条件的一次性任务（如多个数据库导入服务），**必须在 `docker-compose.yml` 中建立明确的串行依赖链**（`B` 依赖 `A`, `C` 依赖 `B`），确保其顺序执行。

## 5. README规范
- **严格遵循**: 严格遵循项目 `README.md` 文档中的要求，特别是被'!!!!'符号包裹的重要事项，确保项目的可理解性和可操作性。